{"name":"New Macro","type":"chat","author":"r1XoJ7mBfXwn6PHu","img":"icons/svg/dice-target.svg","scope":"global","command":"","folder":null,"sort":0,"permission":{"default":0,"r1XoJ7mBfXwn6PHu":3},"flags":{},"_id":"21Byh6xibRiKRDie"}
{"name":"Dragging Strike","type":"script","author":"UKKj3mAdN4TrquTn","img":"systems/pf2e/icons/features/feats/feats.webp","scope":"global","command":"game.pf2e.rollItemMacro(\"F6IRKptPV94kfi24\");","folder":null,"sort":0,"permission":{"default":0,"UKKj3mAdN4TrquTn":3},"flags":{"pf2e":{"itemMacro":true}},"_id":"241nx0eHZzaEsKpV"}
{"name":"Raise a Shield","permission":{"default":0,"wjLljf8WEnpUL7Wq":3},"type":"script","sort":100001,"flags":{"core":{"sourceId":"Compendium.pf2e.action-macros.4hfQEMiEOBbqelAh"}},"scope":"global","command":"game.pf2e.actions.raiseAShield({ actors: [token.actor ?? actor].filter((actor) => actor !== null) })","author":"wjLljf8WEnpUL7Wq","img":"systems/pf2e/icons/actions/raise-a-shield.webp","actorIds":[],"_id":"2hsONyUDyK3YKQ6h"}
{"name":"Raise a Shield","type":"script","author":"UKKj3mAdN4TrquTn","img":"systems/pf2e/icons/actions/raise-a-shield.webp","scope":"global","command":"game.pf2e.actions.raiseAShield({ actors: [token?.actor ?? actor ?? game.user.character].filter((actor) => actor) })","folder":null,"sort":0,"permission":{"default":1,"UKKj3mAdN4TrquTn":3},"flags":{"core":{"sourceId":"Compendium.pf2e.action-macros.4hfQEMiEOBbqelAh"}},"_id":"43GP6aG6jd4hZWRK"}
{"_id":"4yNmftKtrrLIUZcS","name":"Spell Effect: Inspire Defense","permission":{"default":0,"xK5bS6BbC1awTIkq":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"\nconst ITEM_UUID = 'Compendium.pf2e.spell-effects.DLwTvjjnqs2sNGuG'; // Spell Effect: Inspire Defense\n(async () => {\n  const effect = duplicate(await fromUuid(ITEM_UUID));\n  effect.flags.core = effect.flags.core ?? {};\n  effect.flags.core.sourceId = ITEM_UUID;\n  for await (const token of canvas.tokens.controlled) {\n    let existing = token.actor.items.find(i => i.type === 'effect' && i.data.flags.core?.sourceId === ITEM_UUID);\n    if (existing) {\n      token.actor.deleteOwnedItem(existing._id);\n    } else {\n      token.actor.createOwnedItem(effect);\n    }\n  }\n})();\n","author":"xK5bS6BbC1awTIkq","img":"systems/pf2e/icons/spells/inspire-defense.webp","actorIds":[]}
{"name":"Skill Check: Acrobatics","permission":{"default":0,"aj0qIR9qSrCFNF27":3},"type":"script","sort":100001,"flags":{"pf2e":{"skillMacro":true}},"scope":"global","command":"\nconst a = game.actors.get('RihG9VyofDNJpgM3');\nif (a) {\n    const opts = a.getRollOptions(['all', 'skill-check', 'acrobatics']);\n    a.data.data.skills['acr']?.roll(event, opts);\n} else {\n    ui.notifications.error(game.i18n.localize('PF2E.MacroActionNoActorError'));\n}","author":"aj0qIR9qSrCFNF27","img":"icons/svg/d20-grey.svg","actorIds":[],"_id":"5225jXufNe0j6zmH"}
{"name":"Spell Effect: Inspire Courage","type":"script","author":"r1XoJ7mBfXwn6PHu","img":"systems/pf2e/icons/spells/inspire-courage.webp","scope":"global","command":"const actors = canvas.tokens.controlled.flatMap((token) => token.actor ?? []);\nif (!actors.length && game.user.character) {\n    actors.push(game.user.character);\n}\nconst ITEM_UUID = 'Compendium.pf2e.spell-effects.beReeFroAx24hj83'; // Spell Effect: Inspire Courage\nconst source = (await fromUuid(ITEM_UUID)).toObject();\nsource.flags.core ??= {};\nsource.flags.core.sourceId = ITEM_UUID;\nfor await (const actor of actors) {\n    const existing = actor.itemTypes.effect.find((effect) => effect.getFlag('core', 'sourceId') === ITEM_UUID);\n    if (existing) {\n        await existing.delete();\n    } else {\n        await actor.createEmbeddedDocuments('Item', [source]);\n    }\n}","folder":null,"sort":0,"permission":{"default":0,"r1XoJ7mBfXwn6PHu":3},"flags":{},"_id":"6LvuVRUqPRrlFjet"}
{"_id":"6SLzEXoxuU1XeUiS","name":"Elixir of Life (Lesser)","permission":{"default":0,"aj0qIR9qSrCFNF27":3},"type":"script","sort":100001,"flags":{"pf2e":{"itemMacro":true}},"scope":"global","command":"game.pf2e.rollItemMacro(\"oxWFZ4XaMr3OM2r2\");","author":"aj0qIR9qSrCFNF27","img":"systems/pf2e/icons/equipment/alchemical-items/alchemical-elixirs/elixir-of-life.webp","actorIds":[]}
{"_id":"6oCwAdVoBal725Qp","name":"Effect: Quicksilver Mutagen (Greater)","permission":{"default":0,"wjLljf8WEnpUL7Wq":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"\nconst ITEM_UUID = 'Compendium.pf2e.consumable-effects.2Bds6d4UGQZqYSZM'; // Effect: Quicksilver Mutagen (Greater)\n(async () => {\n  const effect = duplicate(await fromUuid(ITEM_UUID));\n  effect.flags.core = effect.flags.core ?? {};\n  effect.flags.core.sourceId = effect.flags.core.sourceId ?? ITEM_UUID;\n  for await (const token of canvas.tokens.controlled) {\n    let existing = token.actor.items.find(i => i.type === 'effect' && i.data.flags.core?.sourceId === ITEM_UUID);\n    if (existing) {\n      token.actor.deleteOwnedItem(existing._id);\n    } else {\n      token.actor.createOwnedItem(effect);\n    }\n  }\n})();\n","author":"wjLljf8WEnpUL7Wq","img":"systems/pf2e/icons/equipment/alchemical-items/alchemical-elixirs/quicksilver-mutagen.webp","actorIds":[]}
{"_id":"6ru6jj9688EcHFUN","name":"Strike: Exquisite Sword Cane Sheath (Sneak Attack d6)(Doubling)","permission":{"default":0,"UKKj3mAdN4TrquTn":3},"type":"script","sort":100001,"flags":{"pf2e":{"actionMacro":true}},"scope":"global","command":"game.pf2e.rollActionMacro('eHQEVSAjkEKCBeD8', 4, 'Exquisite Sword Cane Sheath (Sneak Attack d6)(Doubling)')","author":"UKKj3mAdN4TrquTn","img":"systems/pf2e/icons/equipment/weapons/sword-cane.webp","actorIds":[]}
{"name":"Treat Wounds Macro","permission":{"default":0,"wjLljf8WEnpUL7Wq":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"let toChat = (content, rollString) => {\r\n    let chatData = {\r\n        user: game.user.id,\r\n        content,\r\n        speaker: ChatMessage.getSpeaker(),\r\n    }\r\n    ChatMessage.create(chatData, {})\r\n    if (rollString) {\r\n        let roll = new Roll(rollString).roll();\r\n        chatData = {\r\n            ...chatData,\r\n            flavor: \"Treat Wounds Healing\",\r\n            type: CONST.CHAT_MESSAGE_TYPES.ROLL,\r\n            roll\r\n          }\r\n        ChatMessage.create(chatData, {})\r\n    }\r\n    \r\n}\r\n\r\nconst handleCrits = (roll) => roll === 1 ? -1 : (roll === 20 ? 1 : 0);\r\n\r\nlet rollTreatWounds = (args) => {\r\n    let {DC, bonus, med, name} = args;\r\n\r\n    const roll = new Roll(`d20`).roll().total;\r\n    const crit = handleCrits(roll)\r\n\r\n    let message = `${name} Treats Wounds at a DC ${DC}... they roll a [[${roll}+${med.value}]] and`;\r\n\r\n    let success = 0;\r\n\r\n    if (roll + med.value >= DC+10) {\r\n        success = 2;\r\n    } else if (roll + med.value >= DC) {\r\n        success = 1;\r\n    } else if (roll + med.value <= DC-10) {\r\n        // Fix for crit fail to match CRB 10 or less\r\n        success = -1;\r\n    }\r\n\r\n    success += crit;\r\n\r\n    if (success > 1) {\r\n        toChat(`${message} critically succeed!`, `4d8+${bonus}`);\r\n    } else if (success === 1) {\r\n        toChat(`${message} succeed.`, `2d8+${bonus}`);\r\n    } else if (success < 0) {\r\n        toChat(`${message} critically fail! The target takes damage.`, '1d8');\r\n    } else if (success === 0) {\r\n        toChat(`${message} fail.`);\r\n    }\r\n}\r\n\r\n\r\nlet applyChanges = false;\r\nnew Dialog({\r\n  title: `Treat Wounds`,\r\n  content: `\r\n    <div>Select a target DC, remember that you can't attempt a heal above your proficiency. Attempting to do so will downgrade the DC and amount healed to the highest you're capable of.<div>\r\n    <hr/>\r\n    <form>\r\n      <div class=\"form-group\">\r\n        <label>Medicine DC:</label>\r\n        <select id=\"dc-type\" name=\"dc-type\">\r\n          <option value=\"trained\">Trained DC 15</option>\r\n          <option value=\"expert\">Expert DC 20, +10 Healing</option>\r\n          <option value=\"master\">Master DC 30, +30 Healing</option>\r\n          <option value=\"legendary\">Legendary DC 40, +50 Healing</option>\r\n        </select>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>DC Modifier:</label>\r\n        <input id=\"modifier\" name=\"modifier\" type=\"number\"/>\r\n      </div>\r\n    </form>\r\n    `,\r\n  buttons: {\r\n    yes: {\r\n      icon: \"<i class='fas fa-check'></i>\",\r\n      label: `Treat Wounds`,\r\n      callback: () => applyChanges = true\r\n    },\r\n    no: {\r\n      icon: \"<i class='fas fa-times'></i>\",\r\n      label: `Cancel`\r\n    },\r\n  },\r\n  default: \"yes\",\r\n  close: html => {\r\n    if (applyChanges) {\r\n      for ( let token of canvas.tokens.controlled ) {\r\n        const {med} = token.actor.data.data.skills;\r\n        const {name} = token;\r\n        let prof = html.find('[name=\"dc-type\"]')[0].value || \"trained\";\r\n        let mod = parseInt(html.find('[name=\"modifier\"]')[0].value) || 0;\r\n        if (prof === 'legendary') {\r\n            if (med.rank >= 4) {\r\n                return rollTreatWounds({DC: 40+mod, bonus: 50, med, name});\r\n            }\r\n            prof = 'master';\r\n        } \r\n        if (prof === 'master') {\r\n            if (med.rank >= 3) {\r\n                return rollTreatWounds({DC: 30+mod, bonus: 30, med, name});\r\n            }\r\n            prof = 'expert';\r\n        }\r\n        if (prof === 'expert') {\r\n            if (med.rank >= 2) {\r\n                return rollTreatWounds({DC: 20+mod, bonus: 10, med, name});\r\n            }\r\n            prof = 'trained';\r\n        }\r\n        if (prof === 'trained') {\r\n            if (med.rank >= 1) {\r\n                return rollTreatWounds({DC: 15+mod, bonus: 0, med, name});\r\n            }\r\n        }\r\n        toChat(`${name} is not trained in Medicine, and doesn't know how to treat wounds!`);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n}).render(true);","author":"wjLljf8WEnpUL7Wq","img":"icons/svg/regen.svg","actorIds":[],"_id":"7MziVEvKVKIG0F3u"}
{"_id":"7Xbz3bxEcprwcddw","name":"Spell Effect: Bless","permission":{"default":0,"xK5bS6BbC1awTIkq":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"\nconst ITEM_UUID = 'Compendium.pf2e.spell-effects.Gqy7K6FnbLtwGpud'; // Spell Effect: Bless\n(async () => {\n  const effect = duplicate(await fromUuid(ITEM_UUID));\n  effect.flags.core = effect.flags.core ?? {};\n  effect.flags.core.sourceId = effect.flags.core.sourceId ?? ITEM_UUID;\n  for await (const token of canvas.tokens.controlled) {\n    let existing = token.actor.items.find(i => i.type === 'effect' && i.data.flags.core?.sourceId === ITEM_UUID);\n    if (existing) {\n      token.actor.deleteOwnedItem(existing._id);\n    } else {\n      token.actor.createOwnedItem(effect);\n    }\n  }\n})();\n","author":"xK5bS6BbC1awTIkq","img":"systems/pf2e/icons/spells/bless.webp","actorIds":[]}
{"name":"New Macro","permission":{"default":0,"xK5bS6BbC1awTIkq":3},"type":"chat","sort":100001,"flags":{},"scope":"global","command":"","author":"xK5bS6BbC1awTIkq","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"7yLLk7Rk6WOySnIu"}
{"_id":"9NVs9CcJQKpA5uri","name":"Spell Effect: Heroism","permission":{"default":0,"wjLljf8WEnpUL7Wq":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"const ITEM_UUID = 'Compendium.pf2e.spell-effects.l9HRQggofFGIxEse'; // Spell Effect: Heroism\n(async () => {\n  const effect = duplicate(await fromUuid(ITEM_UUID));\n  effect.flags.core = effect.flags.core ?? {};\n  effect.flags.core.sourceId = ITEM_UUID;\n  for await (const token of canvas.tokens.controlled) {\n    let existing = token.actor.items.find(i => i.type === 'effect' && i.data.flags.core?.sourceId === ITEM_UUID);\n    if (existing) {\n      token.actor.deleteOwnedItem(existing._id);\n    } else {\n      token.actor.createOwnedItem(effect);\n    }\n  }\n})();","author":"wjLljf8WEnpUL7Wq","img":"systems/pf2e/icons/spells/heroism.webp","actorIds":[]}
{"name":"Spell Effect: Inspire Heroics (Defense, +3)","type":"script","author":"UKKj3mAdN4TrquTn","img":"systems/pf2e/icons/spells/inspire-heroics.webp","scope":"global","command":"const actors = canvas.tokens.controlled.flatMap((token) => token.actor ?? []);\nif (!actors.length && game.user.character) {\n    actors.push(game.user.character);\n}\nconst ITEM_UUID = 'Compendium.pf2e.spell-effects.BKam63zT98iWMJH7'; // Spell Effect: Inspire Heroics (Defense, +3)\nconst source = (await fromUuid(ITEM_UUID)).toObject();\nsource.flags.core ??= {};\nsource.flags.core.sourceId = ITEM_UUID;\nfor await (const actor of actors) {\n    const existing = actor.itemTypes.effect.find((effect) => effect.getFlag('core', 'sourceId') === ITEM_UUID);\n    if (existing) {\n        await existing.delete();\n    } else {\n        await actor.createEmbeddedDocuments('Item', [source]);\n    }\n}","folder":null,"sort":0,"permission":{"default":0,"UKKj3mAdN4TrquTn":3},"flags":{},"_id":"9ppHJfUUzT82DkNr"}
{"name":"Spell Effect: Inspire Courage","type":"script","author":"UKKj3mAdN4TrquTn","img":"systems/pf2e/icons/spells/inspire-courage.webp","scope":"global","command":"const actors = canvas.tokens.controlled.flatMap((token) => token.actor ?? []);\nif (!actors.length && game.user.character) {\n    actors.push(game.user.character);\n}\nconst ITEM_UUID = 'Compendium.pf2e.spell-effects.beReeFroAx24hj83'; // Spell Effect: Inspire Courage\nconst source = (await fromUuid(ITEM_UUID)).toObject();\nsource.flags.core ??= {};\nsource.flags.core.sourceId = ITEM_UUID;\nfor await (const actor of actors) {\n    const existing = actor.itemTypes.effect.find((effect) => effect.getFlag('core', 'sourceId') === ITEM_UUID);\n    if (existing) {\n        await existing.delete();\n    } else {\n        await actor.createEmbeddedDocuments('Item', [source]);\n    }\n}","folder":null,"sort":0,"permission":{"default":0,"UKKj3mAdN4TrquTn":3},"flags":{},"_id":"Aa0xcRoc1Kdq34Gj"}
{"name":"Attack of Opportunity","type":"script","author":"UKKj3mAdN4TrquTn","img":"systems/pf2e/icons/features/feats/feats.webp","scope":"global","command":"game.pf2e.rollItemMacro(\"lEX2ZXGHRHPldHbn\");","folder":null,"sort":0,"permission":{"default":0,"UKKj3mAdN4TrquTn":3},"flags":{"pf2e":{"itemMacro":true}},"_id":"B0UHifT0Eye1SfQQ"}
{"name":"Effect: Raise a Shield","permission":{"default":0,"zZPHTu5QbzEB3VuQ":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"\nconst ITEM_UUID = 'Compendium.pf2e.equipment-effects.2YgXoHvJfrDHucMr'; // Effect: Raise a Shield\n(async () => {\n  const effect = duplicate(await fromUuid(ITEM_UUID));\n  effect.flags.core = effect.flags.core ?? {};\n  effect.flags.core.sourceId = effect.flags.core.sourceId ?? ITEM_UUID;\n  for await (const token of canvas.tokens.controlled) {\n    let existing = token.actor.items.find(i => i.type === 'effect' && i.data.flags.core?.sourceId === ITEM_UUID);\n    if (existing) {\n      token.actor.deleteOwnedItem(existing._id);\n    } else {\n      token.actor.createOwnedItem(effect);\n    }\n  }\n})();\n","author":"zZPHTu5QbzEB3VuQ","img":"systems/pf2e/icons/actions/raise-a-shield.webp","actorIds":[],"_id":"BMuxuh4f8d0XOP4T"}
{"_id":"BkmZHNdTevi9QHcN","name":"Strike: Darkwood club","permission":{"default":0,"zZPHTu5QbzEB3VuQ":3},"type":"script","sort":100001,"flags":{"pf2e":{"actionMacro":true}},"scope":"global","command":"game.pf2e.rollActionMacro('rVzB53L43fnvPA8o', 0, 'Darkwood club')","author":"zZPHTu5QbzEB3VuQ","img":"systems/pf2e/icons/default-icons/mystery-man.svg","actorIds":[]}
{"name":"Skill Check: Athletics","permission":{"default":0,"aj0qIR9qSrCFNF27":3},"type":"script","sort":100001,"flags":{"pf2e":{"skillMacro":true}},"scope":"global","command":"\nconst a = game.actors.get('RihG9VyofDNJpgM3');\nif (a) {\n    const opts = a.getRollOptions(['all', 'skill-check', 'athletics']);\n    a.data.data.skills['ath']?.roll(event, opts);\n} else {\n    ui.notifications.error(game.i18n.localize('PF2E.MacroActionNoActorError'));\n}","author":"aj0qIR9qSrCFNF27","img":"icons/svg/d20-grey.svg","actorIds":[],"_id":"Bsdh8lke7xUEvxQk"}
{"_id":"D1juXOGupdJX3KXV","name":"Effect: Juggernaut Mutagen (Greater)","permission":{"default":0,"wjLljf8WEnpUL7Wq":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"\nconst ITEM_UUID = 'Compendium.pf2e.consumable-effects.xLilBqqf34ZJYO9i'; // Effect: Juggernaut Mutagen (Greater)\n(async () => {\n  const effect = duplicate(await fromUuid(ITEM_UUID));\n  effect.flags.core = effect.flags.core ?? {};\n  effect.flags.core.sourceId = effect.flags.core.sourceId ?? ITEM_UUID;\n  for await (const token of canvas.tokens.controlled) {\n    let existing = token.actor.items.find(i => i.type === 'effect' && i.data.flags.core?.sourceId === ITEM_UUID);\n    if (existing) {\n      token.actor.deleteOwnedItem(existing._id);\n    } else {\n      token.actor.createOwnedItem(effect);\n    }\n  }\n})();\n","author":"wjLljf8WEnpUL7Wq","img":"systems/pf2e/icons/equipment/alchemical-items/alchemical-elixirs/juggernaut-mutagen.webp","actorIds":[]}
{"_id":"Dz2J7UBvA2pllS4b","name":"underworld","permission":{"default":0,"UKKj3mAdN4TrquTn":3},"type":"script","sort":100001,"flags":{"pf2e":{"itemMacro":true}},"scope":"global","command":"game.pf2e.rollItemMacro(\"epN71C2X1zuAhINR\");","author":"UKKj3mAdN4TrquTn","img":"systems/pf2e/icons/default-icons/mystery-man.svg","actorIds":[]}
{"_id":"Fu92HtYqZW77ugMh","name":"Phantasmal Killer","permission":{"default":0,"UKKj3mAdN4TrquTn":3},"type":"script","sort":100001,"flags":{"pf2e":{"itemMacro":true}},"scope":"global","command":"game.pf2e.rollItemMacro(\"eSbSSsYbLUac5EZ0\");","author":"UKKj3mAdN4TrquTn","img":"systems/pf2e/icons/spells/phantasmal-killer.webp","actorIds":[]}
{"name":"New Macro","permission":{"default":0,"wjLljf8WEnpUL7Wq":3},"type":"chat","sort":100001,"flags":{},"scope":"global","command":"","author":"wjLljf8WEnpUL7Wq","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"Gr09khc9cyhqQQtt"}
{"_id":"HYqXA5wN46X0WtTU","name":"Spell Effect: Shield","permission":{"default":0,"NK1nadT00ZFJhaGM":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"\nconst ITEM_UUID = 'Compendium.pf2e.spell-effects.Jemq5UknGdMO7b73'; // Spell Effect: Shield\n(async () => {\n  const effect = duplicate(await fromUuid(ITEM_UUID));\n  effect.flags.core = effect.flags.core ?? {};\n  effect.flags.core.sourceId = ITEM_UUID;\n  for await (const token of canvas.tokens.controlled) {\n    let existing = token.actor.items.find(i => i.type === 'effect' && i.data.flags.core?.sourceId === ITEM_UUID);\n    if (existing) {\n      token.actor.deleteOwnedItem(existing._id);\n    } else {\n      token.actor.createOwnedItem(effect);\n    }\n  }\n})();\n","author":"NK1nadT00ZFJhaGM","img":"systems/pf2e/icons/spells/shield.webp","actorIds":[]}
{"name":"Spell Effect: Inspire Defense","type":"script","author":"zZPHTu5QbzEB3VuQ","img":"systems/pf2e/icons/spells/inspire-defense.webp","scope":"global","command":"const actors = canvas.tokens.controlled.flatMap((token) => token.actor ?? []);\nif (!actors.length && game.user.character) {\n    actors.push(game.user.character);\n}\nconst ITEM_UUID = 'Compendium.pf2e.spell-effects.DLwTvjjnqs2sNGuG'; // Spell Effect: Inspire Defense\nconst source = (await fromUuid(ITEM_UUID)).toObject();\nsource.flags.core ??= {};\nsource.flags.core.sourceId = ITEM_UUID;\nfor await (const actor of actors) {\n    const existing = actor.itemTypes.effect.find((effect) => effect.getFlag('core', 'sourceId') === ITEM_UUID);\n    if (existing) {\n        await existing.delete();\n    } else {\n        await actor.createEmbeddedDocuments('Item', [source]);\n    }\n}","folder":null,"sort":0,"permission":{"default":0,"zZPHTu5QbzEB3VuQ":3},"flags":{},"_id":"IMHgCH6mMLCN5U8D"}
{"name":"New Macro","type":"chat","author":"aj0qIR9qSrCFNF27","img":"icons/svg/dice-target.svg","scope":"global","command":"","folder":null,"sort":0,"permission":{"default":0,"aj0qIR9qSrCFNF27":3},"flags":{},"_id":"J7iOVpscn1mJnWNv"}
{"name":"Spell Effect: Inspire Defense","type":"script","author":"NK1nadT00ZFJhaGM","img":"systems/pf2e/icons/spells/inspire-defense.webp","scope":"global","command":"const actors = canvas.tokens.controlled.flatMap((token) => token.actor ?? []);\nif (!actors.length && game.user.character) {\n    actors.push(game.user.character);\n}\nconst ITEM_UUID = 'Compendium.pf2e.spell-effects.DLwTvjjnqs2sNGuG'; // Spell Effect: Inspire Defense\nconst source = (await fromUuid(ITEM_UUID)).toObject();\nsource.flags.core ??= {};\nsource.flags.core.sourceId = ITEM_UUID;\nfor await (const actor of actors) {\n    const existing = actor.itemTypes.effect.find((effect) => effect.getFlag('core', 'sourceId') === ITEM_UUID);\n    if (existing) {\n        await existing.delete();\n    } else {\n        await actor.createEmbeddedDocuments('Item', [source]);\n    }\n}","folder":null,"sort":0,"permission":{"default":0,"NK1nadT00ZFJhaGM":3},"flags":{},"_id":"JpMNIVRPik5XDpGv"}
{"name":"New Macro","type":"chat","author":"aj0qIR9qSrCFNF27","img":"icons/svg/dice-target.svg","scope":"global","command":"","folder":null,"sort":0,"permission":{"default":0,"aj0qIR9qSrCFNF27":3},"flags":{},"_id":"K1BMwFdhFIvQLchr"}
{"name":"Scare to Death","type":"script","author":"UKKj3mAdN4TrquTn","img":"systems/pf2e/icons/actions/OneAction.webp","scope":"global","command":"game.pf2e.rollItemMacro(\"mChLJuw8RVWPhzzb\");","folder":null,"sort":0,"permission":{"default":0,"UKKj3mAdN4TrquTn":3},"flags":{"pf2e":{"itemMacro":true}},"_id":"L46Xpu2o1Hm5CJCd"}
{"name":"Spell Effect: Inspire Courage","type":"script","author":"NK1nadT00ZFJhaGM","img":"systems/pf2e/icons/spells/inspire-courage.webp","scope":"global","command":"const actors = canvas.tokens.controlled.flatMap((token) => token.actor ?? []);\nif (!actors.length && game.user.character) {\n    actors.push(game.user.character);\n}\nconst ITEM_UUID = 'Compendium.pf2e.spell-effects.beReeFroAx24hj83'; // Spell Effect: Inspire Courage\nconst source = (await fromUuid(ITEM_UUID)).toObject();\nsource.flags.core ??= {};\nsource.flags.core.sourceId = ITEM_UUID;\nfor await (const actor of actors) {\n    const existing = actor.itemTypes.effect.find((effect) => effect.getFlag('core', 'sourceId') === ITEM_UUID);\n    if (existing) {\n        await existing.delete();\n    } else {\n        await actor.createEmbeddedDocuments('Item', [source]);\n    }\n}","folder":null,"sort":0,"permission":{"default":0,"NK1nadT00ZFJhaGM":3},"flags":{},"_id":"L8zFzXoI0mKPmLtX"}
{"_id":"MVukkGAnjhxslC3g","name":"Spell Effect: Inspire Heroics (Courage, +2)","permission":{"default":0,"wjLljf8WEnpUL7Wq":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"\nconst ITEM_UUID = 'Compendium.pf2e.spell-effects.kZ39XWJA3RBDTnqG'; // Spell Effect: Inspire Heroics (Courage, +2)\n(async () => {\n  const effect = duplicate(await fromUuid(ITEM_UUID));\n  effect.flags.core = effect.flags.core ?? {};\n  effect.flags.core.sourceId = effect.flags.core.sourceId ?? ITEM_UUID;\n  for await (const token of canvas.tokens.controlled) {\n    let existing = token.actor.items.find(i => i.type === 'effect' && i.data.flags.core?.sourceId === ITEM_UUID);\n    if (existing) {\n      token.actor.deleteOwnedItem(existing._id);\n    } else {\n      token.actor.createOwnedItem(effect);\n    }\n  }\n})();\n","author":"wjLljf8WEnpUL7Wq","img":"systems/pf2e/icons/spells/inspire-heroics.webp","actorIds":[]}
{"_id":"O6KtaSZorBxz5CKg","name":"Rage","permission":{"default":0,"zZPHTu5QbzEB3VuQ":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"const RAGE_DAMAGE = 2; // increase for giant instinct or higher levels\r\n\r\n(async () => {\r\n    if (actor) {\r\n    for (let token of canvas.tokens.controlled) {\r\n      if (\r\n        (token.actor.data.data.customModifiers[\"ac\"] || []).some(\r\n          (modifier) => modifier.name === \"Rage\"\r\n        )\r\n      ) {\r\n        await actor.removeCustomModifier(\"ac\", \"Rage\");\r\n        await actor.removeCustomModifier(\"damage\", \"Rage\");\r\n        /// Remove the line below if you do not wish for your character to lose all temp hp when toggled \"off\".\r\n        await actor.update({ \"data.attributes.hp.temp\": 0 });\r\n        /// Remove the line above if you do not wish for your character to lose all temp hp when toggled \"off\".\r\n        if (\r\n          token.data.effects.includes(\r\n            \"systems/pf2e/icons/features/classes/rage.jpg\"\r\n          )\r\n        ) {\r\n          token.toggleEffect(\"systems/pf2e/icons/features/classes/rage.jpg\");\r\n        }\r\n      } else {\r\n        const tmpHP =\r\n          token.actor.data.data.details.level.value +\r\n          token.actor.data.data.abilities.con.mod;\r\n        if (token.actor.data.data.attributes.hp.temp < tmpHP) {\r\n          await actor.update({ \"data.attributes.hp.temp\": tmpHP });\r\n        }\r\n        await actor.addCustomModifier(\"ac\", \"Rage\", -1, \"untyped\");\r\n        await actor.addCustomModifier(\"damage\", \"Rage\", RAGE_DAMAGE, \"status\");\r\n        if (\r\n          !token.data.effects.includes(\r\n            \"systems/pf2e/icons/features/classes/rage.jpg\"\r\n          )\r\n        ) {\r\n          token.toggleEffect(\"systems/pf2e/icons/features/classes/rage.jpg\");\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    ui.notifications.warn(\"You must have an actor selected.\");\r\n  }\r\n})();\r\n","author":"zZPHTu5QbzEB3VuQ","img":"systems/pf2e/icons/features/classes/rage.webp","actorIds":[]}
{"name":"New Macro","permission":{"default":0,"xK5bS6BbC1awTIkq":3},"type":"chat","sort":100001,"flags":{},"scope":"global","command":"","author":"xK5bS6BbC1awTIkq","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"OE232jr2ORazN8XZ"}
{"name":"Rest for the Night","permission":{"default":0,"wjLljf8WEnpUL7Wq":3},"type":"script","sort":100001,"flags":{"core":{"sourceId":"Compendium.pf2e.pf2e-macros.0GU2sdy3r2MeC56x"}},"scope":"global","command":"const FAST_RECOVERY = 'Compendium.pf2e.feats-srd.N8Xz5fuW6o7GW124';\nconst DREAM_MAY = 'Compendium.pf2e.feats-srd.kqnFdIhToKTnOpMl';\n\nconst levelMultiplier = (actor) =>\n    actor.items.filter((item) => [FAST_RECOVERY, DREAM_MAY].includes(item.data.flags.core?.sourceId)).length + 1;\n\nconst recover = () => {\n    const Character = CONFIG.PF2E.Actor.entityClasses.character;\n    const Condition = CONFIG.PF2E.Item.entityClasses.condition;\n    const tokens = canvas.tokens.controlled.filter((token) => token.actor instanceof Character);\n\n    if (tokens.length === 0) {\n        ui.notifications.warn('Select at least one token.');\n    }\n\n    for (const token of tokens) {\n        const actor = token.actor;\n        const actorData = duplicate(actor.data);\n        const items = Array.from(actor.items.values());\n        const abilities = actorData.data.abilities;\n        const attributes = actorData.data.attributes;\n\n        // Hit points\n        const conModifier = abilities.con.mod;\n        const level = actorData.data.details.level.value;\n        const maxRestored = Math.max(conModifier, 1) * level * levelMultiplier(actor);\n        const hpLost = attributes.hp.max - attributes.hp.value;\n        const hpRestored = hpLost >= maxRestored ? maxRestored : hpLost;\n        attributes.hp.value += hpRestored;\n\n        // Conditions\n        const conditions = items.filter((item) => item.type === 'condition' && item.getFlag('pf2e', 'condition'));\n        const conditionChanges = {};\n\n        // Fatigued condition\n        const fatigued = conditions.find((item) => item.name === 'Fatigued');\n        if (fatigued instanceof Condition) {\n            PF2eConditionManager.removeConditionFromToken(fatigued.id, token);\n            conditionChanges.Fatigued = null;\n        }\n\n        // Doomed and Drained conditions\n        for (const conditionName of ['Doomed', 'Drained']) {\n            const doomedOrDrained = conditions.find((condition) => condition.name === conditionName);\n            if (doomedOrDrained === undefined) {\n                continue;\n            }\n            const value = doomedOrDrained.data.data.value.value;\n            if (value === 1) {\n                PF2eConditionManager.removeConditionFromToken(doomedOrDrained.id, token);\n                conditionChanges[conditionName] = null;\n            } else {\n                const newValue = value - 1;\n                PF2eConditionManager.updateConditionValue(doomedOrDrained.id, token, newValue);\n                conditionChanges[conditionName] = newValue;\n            }\n        }\n\n        // Restore wand charges\n\n        const wands = items.filter((i) => i.data.data.consumableType?.value === 'wand');\n        let wandRecharged = false;\n        const updateData = wands.map((w) => {\n            return { _id: w.id, 'data.charges.value': parseInt(w.data.data.charges.max) };\n        });\n        if (updateData.length > 0) {\n            wandRecharged = true;\n        }\n\n        // Spellcasting entries\n        const restoredList = [];\n        const entries = items.filter((item) => item.type === 'spellcastingEntry');\n        const entriesUpdateData = entries.flatMap((entry) => {\n            const entryType = entry.data.data.prepared.value ? entry.data.data.prepared.value : 'focus';\n\n            // Focus spells\n            if (entryType === 'focus') {\n                const focusPool = duplicate(entry.data.data.focus);\n                if (focusPool.points < focusPool.pool) {\n                    focusPool.points = focusPool.pool;\n                    restoredList.push('Focus Pool');\n                    return { _id: entry.id, 'data.focus': focusPool };\n                }\n\n                return [];\n            }\n\n            // Innate, Spontaneous, and Prepared spells\n            const slots = entry.data.data.slots;\n            let updated = false;\n            for (const slot of Object.values(slots)) {\n                if (['spontaneous', 'innate'].includes(entryType)) {\n                    if (slot.value < slot.max) {\n                        slot.value = slot.max;\n                        updated = true;\n                    }\n                } else {\n                    for (const preparedSpell of Object.values(slot.prepared)) {\n                        if (preparedSpell.expended) {\n                            preparedSpell.expended = false;\n                            updated = true;\n                        }\n                    }\n                }\n            }\n\n            if (updated) {\n                restoredList.push(entryType === 'focus' ? 'Focus Pool' : `${entry.name} spell slots`);\n                return { _id: entry.id, 'data.slots': slots };\n            }\n            return [];\n        });\n\n        updateData.push(...entriesUpdateData);\n\n        // Stamina points\n        const staminaSetting = game.settings.storage.get('world').get('pf2e.staminaVariant');\n        const staminaEnabled = staminaSetting ? Boolean(parseInt(staminaSetting.replace(/\"/g, ''), 10)) : false;\n\n        if (staminaEnabled) {\n            const stamina = attributes.sp;\n            const keyAbility = actorData.data.details.keyability.value;\n            if (stamina.value < stamina.max) {\n                stamina.value = stamina.max;\n                restoredList.push('Stamina');\n            }\n            const resolve = attributes.resolve;\n            const maxResolve = abilities[keyAbility].mod;\n            if (resolve.value < maxResolve) {\n                resolve.value = maxResolve;\n                restoredList.push('Resolve');\n            }\n        }\n\n        // Updated actor with the sweet fruits of rest\n        if (hpRestored > 0 || restoredList.length > 0) {\n            actor.update({ 'data.attributes': attributes });\n        }\n        if (updateData.length > 0) {\n            actor.updateOwnedItem(updateData);\n        }\n\n        // Construct messages\n        const messages = [`${token.name} awakens well-rested.`];\n\n        // Hit-point restoration\n        if (hpRestored > 0) {\n            messages.push(`${hpRestored} hit points restored.`);\n        }\n\n        // Wand recharge\n        if (wandRecharged) {\n            messages.push('Spellcasting wands recharged.');\n        }\n\n        // Attribute restoration\n        const restoredString =\n            restoredList.length === 0\n                ? ''\n                : restoredList.length === 1\n                ? `${restoredList[0]}`\n                : restoredList.length === 2\n                ? `${restoredList.join(' and ')}`\n                : `${restoredList.slice(0, -1).join(', ')}, and ` + `${restoredList.slice(-1)[0]}`;\n        messages.push(restoredList.length > 0 ? `${restoredString} fully restored.` : null);\n\n        // Condition removal\n        const removedConditions = Object.keys(conditionChanges).filter((key) => conditionChanges[key] === null);\n        const removedString =\n            removedConditions.length === 0\n                ? ''\n                : removedConditions.length === 1\n                ? `${removedConditions[0]}`\n                : removedConditions.length === 2\n                ? `${removedConditions.join(' or ')}`\n                : `${restoredList.slice(0, -1).join(', ')}, or ` + `${restoredList.slice(-1)[0]}`;\n        messages.push(removedConditions.length > 0 ? `No longer ${removedString}.` : null);\n\n        // Condition value reduction\n        const reducedConditions = Object.keys(conditionChanges).filter((key) =>\n            Number.isInteger(conditionChanges[key]),\n        );\n        const reducedString =\n            reducedConditions.length === 0\n                ? ''\n                : reducedConditions.length === 1\n                ? `${reducedConditions[0]} condition`\n                : `${reducedConditions.join(' and ')} conditions`;\n        messages.push(reducedConditions.length > 0 ? `${reducedString} reduced by 1.` : null);\n\n        // Send chat message with results\n        ChatMessage.create({\n            user: game.user.id,\n            content: messages.join(' '),\n            speaker: { alias: token.name },\n        });\n    }\n};\n\nnew Dialog({\n    title: 'Rest',\n    content: '<p>Rest for the night?</p>',\n    buttons: {\n        yes: {\n            icon: '<i class=\"fas fa-check\"></i>',\n            label: 'Rest',\n            callback: recover,\n        },\n        no: {\n            icon: '<i class=\"fas fa-times\"></i>',\n            label: 'Cancel',\n        },\n    },\n    default: 'yes',\n}).render(true);","author":"wjLljf8WEnpUL7Wq","img":"icons/svg/sleep.svg","actorIds":[],"_id":"OnehSponLPVsvKT6"}
{"name":"New Macro","type":"chat","author":"r1XoJ7mBfXwn6PHu","img":"icons/svg/dice-target.svg","scope":"global","command":"","folder":null,"sort":0,"permission":{"default":0,"r1XoJ7mBfXwn6PHu":3},"flags":{},"_id":"QFcjSaF75nHDXGxF"}
{"_id":"QSUhNlm4UJRoui0l","name":"Spell Effect: Inspire Heroics (Defense, +2)","permission":{"default":0,"wjLljf8WEnpUL7Wq":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"\nconst ITEM_UUID = 'Compendium.pf2e.spell-effects.Chol7ExtoN2T36mP'; // Spell Effect: Inspire Heroics (Defense, +2)\n(async () => {\n  const effect = duplicate(await fromUuid(ITEM_UUID));\n  effect.flags.core = effect.flags.core ?? {};\n  effect.flags.core.sourceId = effect.flags.core.sourceId ?? ITEM_UUID;\n  for await (const token of canvas.tokens.controlled) {\n    let existing = token.actor.items.find(i => i.type === 'effect' && i.data.flags.core?.sourceId === ITEM_UUID);\n    if (existing) {\n      token.actor.deleteOwnedItem(existing._id);\n    } else {\n      token.actor.createOwnedItem(effect);\n    }\n  }\n})();\n","author":"wjLljf8WEnpUL7Wq","img":"systems/pf2e/icons/spells/inspire-heroics.webp","actorIds":[]}
{"_id":"QSc17rnaJKCQcHiK","name":"Stealth For Selected Tokens","permission":{"default":0,"wjLljf8WEnpUL7Wq":3},"type":"script","sort":100001,"flags":{"core":{"sourceId":"Compendium.pf2e.pf2e-macros.yBuEphSaJJ7V9Yw3"}},"scope":"global","command":"const tokens = canvas.tokens.controlled.filter((t) => ['character', 'npc', 'familiar'].includes(t.actor.data.type));\n\nif (tokens.length === 0) {\n    ui.notifications.error(`You must select at least one npc/pc token`);\n} else {\n    tokens.map((p) => p.actor).forEach((actor) => actor.data.data.skills.ste.roll(event, ['secret']));\n}","author":"wjLljf8WEnpUL7Wq","img":"systems/pf2e/icons/features/classes/surprice-attack.webp","actorIds":[]}
{"name":"New Macro","permission":{"default":0,"zZPHTu5QbzEB3VuQ":3},"type":"chat","sort":100001,"flags":{},"scope":"global","command":"","author":"zZPHTu5QbzEB3VuQ","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"QcKfhLRt3EK0MvLK"}
{"name":"Ranged Reprisal","type":"script","author":"UKKj3mAdN4TrquTn","img":"systems/pf2e/icons/features/feats/feats.webp","scope":"global","command":"game.pf2e.rollItemMacro(\"QpQr9ctCH09a6dSa\");","folder":null,"sort":0,"permission":{"default":0,"UKKj3mAdN4TrquTn":3},"flags":{"pf2e":{"itemMacro":true}},"_id":"UD6oqoLDQCcAYl7U"}
{"_id":"UPHOiVgLPl1QWQRp","name":"Spell Effect: Shield","permission":{"default":0,"zZPHTu5QbzEB3VuQ":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"\nconst ITEM_UUID = 'Compendium.pf2e.spell-effects.Jemq5UknGdMO7b73'; // Spell Effect: Shield\n(async () => {\n  const effect = duplicate(await fromUuid(ITEM_UUID));\n  effect.flags.core = effect.flags.core ?? {};\n  effect.flags.core.sourceId = effect.flags.core.sourceId ?? ITEM_UUID;\n  for await (const token of canvas.tokens.controlled) {\n    let existing = token.actor.items.find(i => i.type === 'effect' && i.data.flags.core?.sourceId === ITEM_UUID);\n    if (existing) {\n      token.actor.deleteOwnedItem(existing._id);\n    } else {\n      token.actor.createOwnedItem(effect);\n    }\n  }\n})();\n","author":"zZPHTu5QbzEB3VuQ","img":"systems/pf2e/icons/spells/shield.webp","actorIds":[]}
{"name":"New Macro","permission":{"default":0,"xK5bS6BbC1awTIkq":3},"type":"chat","sort":100001,"flags":{},"scope":"global","command":"","author":"xK5bS6BbC1awTIkq","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"UigdflOtByT4jFkS"}
{"_id":"UyXd7qPr3vLw60fJ","name":"Spell Effect: Inspire Heroics (Courage, +3)","permission":{"default":0,"wjLljf8WEnpUL7Wq":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"\nconst ITEM_UUID = 'Compendium.pf2e.spell-effects.VFereWC1agrwgzPL'; // Spell Effect: Inspire Heroics (Courage, +3)\n(async () => {\n  const effect = duplicate(await fromUuid(ITEM_UUID));\n  effect.flags.core = effect.flags.core ?? {};\n  effect.flags.core.sourceId = effect.flags.core.sourceId ?? ITEM_UUID;\n  for await (const token of canvas.tokens.controlled) {\n    let existing = token.actor.items.find(i => i.type === 'effect' && i.data.flags.core?.sourceId === ITEM_UUID);\n    if (existing) {\n      token.actor.deleteOwnedItem(existing._id);\n    } else {\n      token.actor.createOwnedItem(effect);\n    }\n  }\n})();\n","author":"wjLljf8WEnpUL7Wq","img":"systems/pf2e/icons/spells/inspire-heroics.webp","actorIds":[]}
{"_id":"VFNFjSih2TECZTdZ","name":"Raise Shield","permission":{"default":0,"wjLljf8WEnpUL7Wq":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"// 'Raise Shield' macro that will raised a shield the character has equipped\r\nlet messageContent = ''\r\nif (!actor) {\r\n    ui.notifications.warn(\"You must have an actor selected.\");\r\n}\r\n\r\n(async () => {\r\n    for (let token of canvas.tokens.controlled) {\r\n        const shield = token.actor.data.items.filter(item => item.type === 'armor')\r\n            .filter(armor => armor.data.armorType.value === 'shield')\r\n            .find(shield => shield.data.equipped.value);\r\n        if (shield) {\r\n            if (token.data.effects.includes(\"systems/pf2e/icons/conditions-2/status_acup.png\")) {\r\n                actor.removeCustomModifier('ac', 'Raised Shield')\r\n                token.toggleEffect(\"systems/pf2e/icons/conditions-2/status_acup.png\")\r\n                messageContent = 'Lowers their shield'\r\n            } else {\r\n                actor.addCustomModifier('ac', 'Raised Shield', Number(shield.data.armor.value), 'circumstance');\r\n                token.toggleEffect(\"systems/pf2e/icons/conditions-2/status_acup.png\")\r\n                messageContent = 'Raises their shield'\r\n            };\r\n\r\n\r\n        } else ui.notifications.warn(\"You must have a shield equipped.\");\r\n    }\r\n})();\r\n// create the message\r\nif (messageContent !== '') {\r\n    let chatData = {\r\n        user: game.user._id,\r\n        speaker: ChatMessage.getSpeaker(),\r\n        content: messageContent,\r\n    };\r\n    ChatMessage.create(chatData, {});\r\n}\r\n","author":"wjLljf8WEnpUL7Wq","img":"systems/pf2e/icons/conditions-2/status_acup.webp","actorIds":[]}
{"name":"New Macro","permission":{"default":0,"zZPHTu5QbzEB3VuQ":3},"type":"chat","sort":100001,"flags":{},"scope":"global","command":"","author":"zZPHTu5QbzEB3VuQ","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"Vixxw3N8n6jYH9xM"}
{"name":"Spell Effect: Inspire Defense","type":"script","author":"UKKj3mAdN4TrquTn","img":"systems/pf2e/icons/spells/inspire-defense.webp","scope":"global","command":"const actors = canvas.tokens.controlled.flatMap((token) => token.actor ?? []);\nif (!actors.length && game.user.character) {\n    actors.push(game.user.character);\n}\nconst ITEM_UUID = 'Compendium.pf2e.spell-effects.DLwTvjjnqs2sNGuG'; // Spell Effect: Inspire Defense\nconst source = (await fromUuid(ITEM_UUID)).toObject();\nsource.flags.core ??= {};\nsource.flags.core.sourceId = ITEM_UUID;\nfor await (const actor of actors) {\n    const existing = actor.itemTypes.effect.find((effect) => effect.getFlag('core', 'sourceId') === ITEM_UUID);\n    if (existing) {\n        await existing.delete();\n    } else {\n        await actor.createEmbeddedDocuments('Item', [source]);\n    }\n}","folder":null,"sort":0,"permission":{"default":0,"UKKj3mAdN4TrquTn":3},"flags":{},"_id":"Y3J7RP33jKxTKMKW"}
{"_id":"Y7CGTn5ed2LjJH8w","name":"Rage","permission":{"default":0,"wjLljf8WEnpUL7Wq":3},"type":"script","folder":null,"sort":100001,"flags":{},"scope":"global","command":"const RAGE_DAMAGE = 2; // increase for giant instinct or higher levels\r\n\r\n(async () => {\r\n    if (actor) {\r\n    for (let token of canvas.tokens.controlled) {\r\n      if (\r\n        (token.actor.data.data.customModifiers[\"ac\"] || []).some(\r\n          (modifier) => modifier.name === \"Rage\"\r\n        )\r\n      ) {\r\n        await actor.removeCustomModifier(\"ac\", \"Rage\");\r\n        await actor.removeCustomModifier(\"damage\", \"Rage\");\r\n        /// Remove the line below if you do not wish for your character to lose all temp hp when toggled \"off\".\r\n        await actor.update({ \"data.attributes.hp.temp\": 0 });\r\n        /// Remove the line above if you do not wish for your character to lose all temp hp when toggled \"off\".\r\n        if (\r\n          token.data.effects.includes(\r\n            \"systems/pf2e/icons/features/classes/rage.jpg\"\r\n          )\r\n        ) {\r\n          token.toggleEffect(\"systems/pf2e/icons/features/classes/rage.jpg\");\r\n        }\r\n      } else {\r\n        const tmpHP =\r\n          token.actor.data.data.details.level.value +\r\n          token.actor.data.data.abilities.con.mod;\r\n        if (token.actor.data.data.attributes.hp.temp < tmpHP) {\r\n          await actor.update({ \"data.attributes.hp.temp\": tmpHP });\r\n        }\r\n        await actor.addCustomModifier(\"ac\", \"Rage\", -1, \"untyped\");\r\n        await actor.addCustomModifier(\"damage\", \"Rage\", RAGE_DAMAGE, \"status\");\r\n        if (\r\n          !token.data.effects.includes(\r\n            \"systems/pf2e/icons/features/classes/rage.jpg\"\r\n          )\r\n        ) {\r\n          token.toggleEffect(\"systems/pf2e/icons/features/classes/rage.jpg\");\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    ui.notifications.warn(\"You must have an actor selected.\");\r\n  }\r\n})();\r\n","author":"wjLljf8WEnpUL7Wq","img":"systems/pf2e/icons/features/classes/rage.webp","actorIds":[]}
{"name":"Spell Effect: Heroism","permission":{"default":0,"r1XoJ7mBfXwn6PHu":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"\nconst ITEM_UUID = 'Compendium.pf2e.spell-effects.l9HRQggofFGIxEse'; // Spell Effect: Heroism\n(async () => {\n  const effect = duplicate(await fromUuid(ITEM_UUID));\n  effect.flags.core = effect.flags.core ?? {};\n  effect.flags.core.sourceId = ITEM_UUID;\n  for await (const token of canvas.tokens.controlled) {\n    let existing = token.actor.items.find(i => i.type === 'effect' && i.data.flags.core?.sourceId === ITEM_UUID);\n    if (existing) {\n      token.actor.deleteOwnedItem(existing._id);\n    } else {\n      token.actor.createOwnedItem(effect);\n    }\n  }\n})();\n","author":"r1XoJ7mBfXwn6PHu","img":"systems/pf2e/icons/spells/heroism.webp","actorIds":[],"_id":"ZYhTCLRDXftlHNfE"}
{"_id":"cuJaAO7Yy6KimBkM","name":"Vampiric Maiden","permission":{"default":0,"UKKj3mAdN4TrquTn":3},"type":"script","sort":100001,"flags":{"pf2e":{"itemMacro":true}},"scope":"global","command":"game.pf2e.rollItemMacro(\"rvk61XAFI0AMLRTb\");","author":"UKKj3mAdN4TrquTn","img":"systems/pf2e/icons/spells/vampiric-maiden.webp","actorIds":[]}
{"_id":"eUTMr2tBYOlmJv7z","name":"Spell Effect: Inspire Heroics (Defense, +3)","permission":{"default":0,"wjLljf8WEnpUL7Wq":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"\nconst ITEM_UUID = 'Compendium.pf2e.spell-effects.BKam63zT98iWMJH7'; // Spell Effect: Inspire Heroics (Defense, +3)\n(async () => {\n  const effect = duplicate(await fromUuid(ITEM_UUID));\n  effect.flags.core = effect.flags.core ?? {};\n  effect.flags.core.sourceId = effect.flags.core.sourceId ?? ITEM_UUID;\n  for await (const token of canvas.tokens.controlled) {\n    let existing = token.actor.items.find(i => i.type === 'effect' && i.data.flags.core?.sourceId === ITEM_UUID);\n    if (existing) {\n      token.actor.deleteOwnedItem(existing._id);\n    } else {\n      token.actor.createOwnedItem(effect);\n    }\n  }\n})();\n","author":"wjLljf8WEnpUL7Wq","img":"systems/pf2e/icons/spells/inspire-heroics.webp","actorIds":[]}
{"name":"Raise a Shield","permission":{"default":0,"r1XoJ7mBfXwn6PHu":3},"type":"script","sort":100001,"flags":{"core":{"sourceId":"Compendium.pf2e.action-macros.4hfQEMiEOBbqelAh"}},"scope":"global","command":"game.pf2e.actions.raiseAShield({ actors: [token.actor ?? actor].filter((actor) => actor !== null) })","author":"r1XoJ7mBfXwn6PHu","img":"systems/pf2e/icons/actions/raise-a-shield.webp","actorIds":[],"_id":"egis37b6GpSzpqiU"}
{"_id":"etdePSqrHBYcGcd6","name":"Fireball (book and staff)","permission":{"default":0,"UKKj3mAdN4TrquTn":3},"type":"script","sort":100001,"flags":{"pf2e":{"itemMacro":true}},"scope":"global","command":"game.pf2e.rollItemMacro(\"2c8tYPbZrWLZivnh\");","author":"UKKj3mAdN4TrquTn","img":"systems/pf2e/icons/spells/fireball.webp","actorIds":[]}
{"_id":"g3QqxQfkAnZFZKd0","name":"Strike: Handwraps of Mighty Blows","permission":{"default":0,"aj0qIR9qSrCFNF27":3},"type":"script","sort":100001,"flags":{"pf2e":{"actionMacro":true}},"scope":"global","command":"game.pf2e.rollActionMacro('RihG9VyofDNJpgM3', 0, 'Handwraps of Mighty Blows')","author":"aj0qIR9qSrCFNF27","img":"systems/pf2e/icons/equipment/worn-items/other-worn-items/handwraps-of-nighty-blows.webp","actorIds":[]}
{"_id":"hERUr6dIpWGuiKSi","name":"Rage","permission":{"default":0,"wjLljf8WEnpUL7Wq":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"const RAGE_DAMAGE = 2; // increase for giant instinct or higher levels\r\n\r\n(async () => {\r\n    if (actor) {\r\n    for (let token of canvas.tokens.controlled) {\r\n      if (\r\n        (token.actor.data.data.customModifiers[\"ac\"] || []).some(\r\n          (modifier) => modifier.name === \"Rage\"\r\n        )\r\n      ) {\r\n        await actor.removeCustomModifier(\"ac\", \"Rage\");\r\n        await actor.removeCustomModifier(\"damage\", \"Rage\");\r\n        /// Remove the line below if you do not wish for your character to lose all temp hp when toggled \"off\".\r\n        await actor.update({ \"data.attributes.hp.temp\": 0 });\r\n        /// Remove the line above if you do not wish for your character to lose all temp hp when toggled \"off\".\r\n        if (\r\n          token.data.effects.includes(\r\n            \"systems/pf2e/icons/features/classes/rage.jpg\"\r\n          )\r\n        ) {\r\n          token.toggleEffect(\"systems/pf2e/icons/features/classes/rage.jpg\");\r\n        }\r\n      } else {\r\n        const tmpHP =\r\n          token.actor.data.data.details.level.value +\r\n          token.actor.data.data.abilities.con.mod;\r\n        if (token.actor.data.data.attributes.hp.temp < tmpHP) {\r\n          await actor.update({ \"data.attributes.hp.temp\": tmpHP });\r\n        }\r\n        await actor.addCustomModifier(\"ac\", \"Rage\", -1, \"untyped\");\r\n        await actor.addCustomModifier(\"damage\", \"Rage\", RAGE_DAMAGE, \"status\");\r\n        if (\r\n          !token.data.effects.includes(\r\n            \"systems/pf2e/icons/features/classes/rage.jpg\"\r\n          )\r\n        ) {\r\n          token.toggleEffect(\"systems/pf2e/icons/features/classes/rage.jpg\");\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    ui.notifications.warn(\"You must have an actor selected.\");\r\n  }\r\n})();\r\n","author":"wjLljf8WEnpUL7Wq","img":"systems/pf2e/icons/features/classes/rage.webp","actorIds":[]}
{"_id":"jXAHcfyrzZGxDDf3","name":"Inspire Courage","permission":{"default":0,"wjLljf8WEnpUL7Wq":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"(async () => {\r\n    if (actor) {\r\n        for ( let token of canvas.tokens.controlled ) {\r\n            let messageContent = '';\r\n                if ((token.actor.data.data.customModifiers['attack'] || []).some(modifier => modifier.name === 'Inspire Courage')) {\r\n                    await token.actor.removeCustomModifier('attack', 'Inspire Courage');\r\n                    await token.actor.removeCustomModifier('damage', 'Inspire Courage');\r\n\r\n                    if (token.data.effects.includes(\"systems/pf2e/icons/conditions-2/status_hero.png\")) {\r\n                        await token.toggleEffect(\"systems/pf2e/icons/conditions-2/status_hero.png\")\r\n                    }\r\n\r\n                    messageContent = 'Is no longer Inspired.'\r\n                } else {\r\n                    await token.actor.addCustomModifier('attack', 'Inspire Courage', 1, 'status');\r\n                    await token.actor.addCustomModifier('damage', 'Inspire Courage', 1, 'status');\r\n\r\n                    if (!token.data.effects.includes(\"systems/pf2e/icons/conditions-2/status_hero.png\")) {\r\n                        await token.toggleEffect(\"systems/pf2e/icons/conditions-2/status_hero.png\")\r\n                    }\r\n\r\n                    messageContent = 'Is Inspired!'\r\n                };\r\n                // create the message \r\n\r\n                if (messageContent !== '') {\r\n                    let chatData = {\r\n                        user: game.user._id,\r\n                        speaker: ChatMessage.getSpeaker(),\r\n                        content: messageContent,\r\n                    };\r\n\r\n                    await ChatMessage.create(chatData, {});\r\n                }\r\n        }\r\n    } else {\r\n        ui.notifications.warn(\"You must have an actor selected.\");\r\n    }\r\n})();\r\n","author":"wjLljf8WEnpUL7Wq","img":"systems/pf2e/icons/conditions-2/status_hero.webp","actorIds":[]}
{"_id":"kmS54cR6GvsalsWk","name":"Kip Up","permission":{"default":0,"aj0qIR9qSrCFNF27":3},"type":"script","sort":100001,"flags":{"pf2e":{"itemMacro":true}},"scope":"global","command":"game.pf2e.rollItemMacro(\"zSE6EjAo4uda2BrA\");","author":"aj0qIR9qSrCFNF27","img":"systems/pf2e/icons/features/feats/feats.webp","actorIds":[]}
{"name":"Spell Effect: Inspire Heroics (Courage, +3)","type":"script","author":"UKKj3mAdN4TrquTn","img":"systems/pf2e/icons/spells/inspire-heroics.webp","scope":"global","command":"const actors = canvas.tokens.controlled.flatMap((token) => token.actor ?? []);\nif (!actors.length && game.user.character) {\n    actors.push(game.user.character);\n}\nconst ITEM_UUID = 'Compendium.pf2e.spell-effects.VFereWC1agrwgzPL'; // Spell Effect: Inspire Heroics (Courage, +3)\nconst source = (await fromUuid(ITEM_UUID)).toObject();\nsource.flags.core ??= {};\nsource.flags.core.sourceId = ITEM_UUID;\nfor await (const actor of actors) {\n    const existing = actor.itemTypes.effect.find((effect) => effect.getFlag('core', 'sourceId') === ITEM_UUID);\n    if (existing) {\n        await existing.delete();\n    } else {\n        await actor.createEmbeddedDocuments('Item', [source]);\n    }\n}","folder":null,"sort":0,"permission":{"default":0,"UKKj3mAdN4TrquTn":3},"flags":{},"_id":"kn4hqBQFomuwlxay"}
{"name":"New Macro","type":"chat","author":"NK1nadT00ZFJhaGM","img":"icons/svg/dice-target.svg","scope":"global","command":"","folder":null,"sort":0,"permission":{"default":0,"NK1nadT00ZFJhaGM":3},"flags":{},"_id":"l602sezp8YLZfZ1A"}
{"name":"New Macro","type":"chat","author":"aj0qIR9qSrCFNF27","img":"icons/svg/dice-target.svg","scope":"global","command":"","folder":null,"sort":0,"permission":{"default":0,"aj0qIR9qSrCFNF27":3},"flags":{},"_id":"lQg5WrSklQUvn6Mn"}
{"name":"Strike: Iomedae's  retribution","type":"script","author":"UKKj3mAdN4TrquTn","img":"systems/pf2e/icons/default-icons/weapon.svg","scope":"global","command":"game.pf2e.rollActionMacro('VV4N5SrDQbfNOYtO', 0, \"Iomedae's  retribution\")","folder":null,"sort":0,"permission":{"default":0,"UKKj3mAdN4TrquTn":3},"flags":{"pf2e":{"actionMacro":true}},"_id":"lbyVraL6VlFUksOu"}
{"_id":"lnSmhYyDMwc6ahUO","name":"Summon Dragon","permission":{"default":0,"UKKj3mAdN4TrquTn":3},"type":"script","sort":100001,"flags":{"pf2e":{"itemMacro":true}},"scope":"global","command":"game.pf2e.rollItemMacro(\"Zwlxh4HKshbxdqWe\");","author":"UKKj3mAdN4TrquTn","img":"systems/pf2e/icons/spells/summon-dragon.webp","actorIds":[]}
{"name":"Treat Wounds","permission":{"default":0,"wjLljf8WEnpUL7Wq":3},"type":"script","sort":100001,"flags":{"core":{"sourceId":"Compendium.pf2e.pf2e-macros.6duZj0Ygiqv712rq"}},"scope":"global","command":"function CheckFeat(slug) {\n    if (token.actor.items.find((i) => i.data.data.slug === slug && i.type === 'feat')) {\n        return true;\n    }\n    return false;\n}\nconst rollTreatWounds = async ({ DC, bonus, med, riskysurgery }) => {\n    const options = actor.getRollOptions(['all', 'skill-check', 'medicine']);\n\n    options.push('treat wounds');\n    options.push('action:treat-wounds');\n\n    const dc = {\n        value: DC,\n    };\n    if (riskysurgery) {\n        dc.modifiers = {\n            success: 'one-degree-better',\n        };\n    }\n\n    med.roll({\n        dc: dc,\n        event: event,\n        options: options,\n        callback: (roll) => {\n            let healFormula, successLabel;\n            const magicHands = CheckFeat('magic-hands');\n\n            const bonusString = bonus > 0 ? `+ ${bonus}` : '';\n            if (roll.data.degreeOfSuccess === 3) {\n                healFormula = magicHands ? `32${bonusString}` : `4d8${bonusString}`;\n                successLabel = 'Critical Success';\n            } else if (roll.data.degreeOfSuccess === 2) {\n                healFormula = magicHands ? `16${bonusString}` : `2d8${bonusString}`;\n                successLabel = 'Success';\n            } else if (roll.data.degreeOfSuccess === 1) {\n                successLabel = 'Failure';\n            } else if (roll.data.degreeOfSuccess === 0) {\n                healFormula = '1d8';\n                successLabel = 'Critical Failure';\n            }\n            if (riskysurgery) {\n                healFormula = roll.data.degreeOfSuccess > 1 ? `${healFormula}-1d8` : healFormula ? `2d8` : `1d8`;\n            }\n            if (healFormula !== undefined) {\n                const healRoll = new Roll(healFormula).roll();\n                const rollType = roll.data.degreeOfSuccess > 1 ? 'Healing' : 'Damage';\n                ChatMessage.create(\n                    {\n                        user: game.user.id,\n                        type: CHAT_MESSAGE_TYPES.ROLL,\n                        flavor: `<strong>${rollType} Roll: Treat Wounds</strong> (${successLabel})`,\n                        roll: healRoll,\n                        speaker: ChatMessage.getSpeaker(),\n                    },\n                    {},\n                );\n            }\n        },\n    });\n};\n\nasync function applyChanges($html) {\n    for (const token of canvas.tokens.controlled) {\n        var { med } = token.actor.data.data.skills;\n        const { name } = token;\n        const mod = parseInt($html.find('[name=\"modifier\"]').val()) || 0;\n        const requestedProf = parseInt($html.find('[name=\"dc-type\"]')[0].value) || 1;\n        const riskysurgery = $html.find('[name=\"risky_surgery_bool\"]')[0]?.checked;\n        const skill = $html.find('[name=\"skill\"]')[0]?.value;\n\n        // Handle Rule Interpretation\n        if (game.user.isGM) {\n            await game.settings.set(\n                'pf2e',\n                'RAI.TreatWoundsAltSkills',\n                $html.find('[name=\"strict_rules\"]')[0]?.checked,\n            );\n        }\n\n        var usedProf = 0;\n\n        if (game.settings.get('pf2e', 'RAI.TreatWoundsAltSkills')) {\n            if (skill === 'cra') {\n                med = token.actor.data.data.skills['cra'];\n            }\n            if (skill === 'nat') {\n                med = token.actor.data.data.skills['nat'];\n            }\n            usedProf = requestedProf <= med.rank ? requestedProf : med.rank;\n        } else {\n            usedProf = requestedProf <= med.rank ? requestedProf : med.rank;\n            if (skill === 'cra') {\n                med = token.actor.data.data.skills['cra'];\n            }\n            if (skill === 'nat') {\n                med = token.actor.data.data.skills['nat'];\n                if (usedProf === 0) {\n                    usedProf = 1;\n                }\n            }\n        }\n        const medicBonus = CheckFeat('medic-dedication') ? (usedProf - 1) * 5 : 0;\n        const roll = [\n            () => ui.notifications.warn(`${name} is not trained in Medicine and doesn't know how to treat wounds.`),\n            () => rollTreatWounds({ DC: 15 + mod, bonus: 0 + medicBonus, med, riskysurgery }),\n            () => rollTreatWounds({ DC: 20 + mod, bonus: 10 + medicBonus, med, riskysurgery }),\n            () => rollTreatWounds({ DC: 30 + mod, bonus: 30 + medicBonus, med, riskysurgery }),\n            () => rollTreatWounds({ DC: 40 + mod, bonus: 50 + medicBonus, med, riskysurgery }),\n        ][usedProf];\n\n        roll();\n    }\n}\n\nif (token === undefined) {\n    ui.notifications.warn('No token is selected.');\n} else {\n    const chirurgeon = CheckFeat('chirurgeon');\n    const naturalMedicine = CheckFeat('natural-medicine');\n    const dialog = new Dialog({\n        title: 'Treat Wounds',\n        content: `\n<div>Select a target DC. Remember that you can't attempt a heal above your proficiency. Attempting to do so will downgrade the DC and amount healed to the highest you're capable of.</div>\n<hr/>\n<form>\n${\n    chirurgeon || naturalMedicine\n        ? `\n<div class=\"form-group\">\n<label>Treat Wounds Skill:</label>\n\n<select id=\"skill\" name=\"skill\">\n<option value=\"med\">Medicine</option>\n\n${chirurgeon ? `<option value=\"cra\">Crafting</option>` : ``}\n${naturalMedicine ? `<option value=\"nat\">Nature</option>` : ``}\n`\n        : ``\n}\n</select>\n</div>\n<div class=\"form-group\">\n<label>Medicine DC:</label>\n<select id=\"dc-type\" name=\"dc-type\">\n<option value=\"1\">Trained DC 15</option>\n<option value=\"2\">Expert DC 20, +10 Healing</option>\n<option value=\"3\">Master DC 30, +30 Healing</option>\n<option value=\"4\">Legendary DC 40, +50 Healing</option>\n</select>\n</div>\n<div class=\"form-group\">\n<label>DC Modifier:</label>\n<input id=\"modifier\" name=\"modifier\" type=\"number\"/>\n</div>\n${\n    CheckFeat('risky-surgery')\n        ? `<div class=\"form-group\">\n<label>Risky Surgery</label>\n<input type=\"checkbox\" id=\"risky_surgery_bool\" name=\"risky_surgery_bool\"></input>\n</div>`\n        : ``\n}\n${\n    game.user.isGM\n        ? `<div class=\"form-group\">\n<label>strict rules</label>\n<input type=\"checkbox\" id=\"strict_rules\" name=\"strict_rules\"` +\n          (game.settings.get('pf2e', 'RAI.TreatWoundsAltSkills') ? ` checked` : ``) +\n          `></input>\n</div>`\n        : ``\n}\n</form>\n`,\n        buttons: {\n            yes: {\n                icon: `<i class=\"fas fa-hand-holding-medical\"></i>`,\n                label: 'Treat Wounds',\n                callback: applyChanges,\n            },\n            no: {\n                icon: `<i class=\"fas fa-times\"></i>`,\n                label: 'Cancel',\n            },\n        },\n        default: 'yes',\n    });\n    dialog.render(true);\n}\n","author":"wjLljf8WEnpUL7Wq","img":"icons/svg/regen.svg","actorIds":[],"_id":"nWP9DkVdXgNlkgjH"}
{"name":"Aggressive Block","type":"script","author":"UKKj3mAdN4TrquTn","img":"systems/pf2e/icons/features/feats/feats.webp","scope":"global","command":"game.pf2e.rollItemMacro(\"Us4irvrl1A6f5MPh\");","folder":null,"sort":0,"permission":{"default":0,"UKKj3mAdN4TrquTn":3},"flags":{"pf2e":{"itemMacro":true}},"_id":"oXQw18EA6v8y8Uhe"}
{"name":"New Macro","permission":{"default":0,"NK1nadT00ZFJhaGM":3},"type":"chat","sort":100001,"flags":{},"scope":"global","command":"","author":"NK1nadT00ZFJhaGM","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"oYZJ7UqcEtJE9p2G"}
{"name":"Effect: Raise a Shield","permission":{"default":0,"zZPHTu5QbzEB3VuQ":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"\nconst ITEM_UUID = 'Compendium.pf2e.equipment-effects.2YgXoHvJfrDHucMr'; // Effect: Raise a Shield\n(async () => {\n  const effect = duplicate(await fromUuid(ITEM_UUID));\n  effect.flags.core = effect.flags.core ?? {};\n  effect.flags.core.sourceId = ITEM_UUID;\n  for await (const token of canvas.tokens.controlled) {\n    let existing = token.actor.items.find(i => i.type === 'effect' && i.data.flags.core?.sourceId === ITEM_UUID);\n    if (existing) {\n      token.actor.deleteOwnedItem(existing._id);\n    } else {\n      token.actor.createOwnedItem(effect);\n    }\n  }\n})();\n","author":"zZPHTu5QbzEB3VuQ","img":"systems/pf2e/icons/actions/raise-a-shield.webp","actorIds":[],"_id":"pMpKnRgE9XSWHRFz"}
{"_id":"s5k28RjeBE2ghNFT","name":"Heroism","permission":{"default":0,"r1XoJ7mBfXwn6PHu":3},"type":"script","sort":100001,"flags":{"pf2e":{"itemMacro":true}},"scope":"global","command":"game.pf2e.rollItemMacro(\"rfnWSThjJlZnXFb3\");","author":"r1XoJ7mBfXwn6PHu","img":"systems/pf2e/icons/spells/heroism.webp","actorIds":[]}
{"name":"Battle Cry","type":"script","author":"UKKj3mAdN4TrquTn","img":"systems/pf2e/icons/actions/FreeAction.webp","scope":"global","command":"game.pf2e.rollItemMacro(\"KaH3yW0dJRLprQ0s\");","folder":null,"sort":0,"permission":{"default":0,"UKKj3mAdN4TrquTn":3},"flags":{"pf2e":{"itemMacro":true}},"_id":"sDicm0TYc6zhaoUO"}
{"_id":"tnSwYjmvEm1dZGuq","name":"Perception For Selected Tokens","permission":{"default":0,"wjLljf8WEnpUL7Wq":3},"type":"script","sort":100001,"flags":{"core":{"sourceId":"Compendium.pf2e.pf2e-macros.084MOWWSEVNwpHVG"}},"scope":"global","command":"const tokens = canvas.tokens.controlled.filter((t) => ['character', 'npc', 'familiar'].includes(t.actor.data.type));\n\nif (tokens.length === 0) {\n    ui.notifications.error(`You must select at least one npc/pc token`);\n} else {\n    tokens.map((p) => p.actor).forEach((actor) => actor.data.data.attributes.perception.roll(event, ['secret']));\n}","author":"wjLljf8WEnpUL7Wq","img":"systems/pf2e/icons/spells/vision-of-weakness.webp","actorIds":[]}
{"name":"Spell Effect: Inspire Defense","type":"script","author":"r1XoJ7mBfXwn6PHu","img":"systems/pf2e/icons/spells/inspire-defense.webp","scope":"global","command":"const actors = canvas.tokens.controlled.flatMap((token) => token.actor ?? []);\nif (!actors.length && game.user.character) {\n    actors.push(game.user.character);\n}\nconst ITEM_UUID = 'Compendium.pf2e.spell-effects.DLwTvjjnqs2sNGuG'; // Spell Effect: Inspire Defense\nconst source = (await fromUuid(ITEM_UUID)).toObject();\nsource.flags.core ??= {};\nsource.flags.core.sourceId = ITEM_UUID;\nfor await (const actor of actors) {\n    const existing = actor.itemTypes.effect.find((effect) => effect.getFlag('core', 'sourceId') === ITEM_UUID);\n    if (existing) {\n        await existing.delete();\n    } else {\n        await actor.createEmbeddedDocuments('Item', [source]);\n    }\n}","folder":null,"sort":0,"permission":{"default":0,"r1XoJ7mBfXwn6PHu":3},"flags":{},"_id":"wEwJPz12eDC2GWRd"}
{"name":"New Macro","permission":{"default":0,"xK5bS6BbC1awTIkq":3},"type":"chat","sort":100001,"flags":{},"scope":"global","command":"","author":"xK5bS6BbC1awTIkq","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"xCuwuARUkulYaMUh"}
{"_id":"yvw9qXACo9oeFAw1","name":"Familiar Conduit","permission":{"default":0,"UKKj3mAdN4TrquTn":3},"type":"script","sort":100001,"flags":{"pf2e":{"itemMacro":true}},"scope":"global","command":"game.pf2e.rollItemMacro(\"165dY1qpBcyRgaVW\");","author":"UKKj3mAdN4TrquTn","img":"systems/pf2e/icons/features/feats/feats.webp","actorIds":[]}
{"_id":"ze7w4hddO2ScFCZG","name":"Cone of Cold","permission":{"default":0,"UKKj3mAdN4TrquTn":3},"type":"script","sort":100001,"flags":{"pf2e":{"itemMacro":true}},"scope":"global","command":"game.pf2e.rollItemMacro(\"JPEtLnPkCamPuRpZ\");","author":"UKKj3mAdN4TrquTn","img":"systems/pf2e/icons/spells/cone-of-cold.webp","actorIds":[]}
{"_id":"zf6opPwfSSagiwhR","name":"Dominate","permission":{"default":0,"UKKj3mAdN4TrquTn":3},"type":"script","sort":100001,"flags":{"pf2e":{"itemMacro":true}},"scope":"global","command":"game.pf2e.rollItemMacro(\"1vFE7jYmrxIOCTo6\");","author":"UKKj3mAdN4TrquTn","img":"systems/pf2e/icons/spells/dominate.webp","actorIds":[]}
{"name":"Retributive Strike","type":"script","author":"UKKj3mAdN4TrquTn","img":"systems/pf2e/icons/actions/Reaction.webp","scope":"global","command":"game.pf2e.rollItemMacro(\"8l9EYngOP1mMLsUn\");","folder":null,"sort":0,"permission":{"default":0,"UKKj3mAdN4TrquTn":3},"flags":{"pf2e":{"itemMacro":true}},"_id":"zuebFf6kTkZzThah"}
{"name":"Spell Effect: Inspire Courage","type":"script","author":"zZPHTu5QbzEB3VuQ","img":"systems/pf2e/icons/spells/inspire-courage.webp","scope":"global","command":"const actors = canvas.tokens.controlled.flatMap((token) => token.actor ?? []);\nif (!actors.length && game.user.character) {\n    actors.push(game.user.character);\n}\nconst ITEM_UUID = 'Compendium.pf2e.spell-effects.beReeFroAx24hj83'; // Spell Effect: Inspire Courage\nconst source = (await fromUuid(ITEM_UUID)).toObject();\nsource.flags.core ??= {};\nsource.flags.core.sourceId = ITEM_UUID;\nfor await (const actor of actors) {\n    const existing = actor.itemTypes.effect.find((effect) => effect.getFlag('core', 'sourceId') === ITEM_UUID);\n    if (existing) {\n        await existing.delete();\n    } else {\n        await actor.createEmbeddedDocuments('Item', [source]);\n    }\n}","folder":null,"sort":0,"permission":{"default":0,"zZPHTu5QbzEB3VuQ":3},"flags":{},"_id":"vhidXtXDYwalNMjU"}
